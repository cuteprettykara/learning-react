마크다운을 렌더링하는 것은 에디터에서도 가능하지만, 포스트를 볼 때도 가능합니다.
따라서 MarkdownRender 컴포넌트를 common 경로에 만들어 사용하겠습니다.

[src/components/common/MarkdownRender/MarkdownRender.js]
import React, { Component } from 'react';
import styles from './MarkdownRender.scss';
import classNames from 'classnames/bind';

import marked from 'marked';

const cx = classNames.bind(styles);

class MarkdownRender extends Component {
  state = {
    html: ''
  }

  renderMarkdown = ()=> {
    const { markdown } = this.props;
    // 마크다운이 존재하지 않는다면 공백처리
    if (!markdown) {
      this.setState({ html: '' });
      return;
    }
    this.setState({
      html: marked(markdown, {
        breaks: true, // 일반 엔터로 새 줄 입력
        sanitize: true// 마크다운 내부 html 무시
      })
    });
  }

  constructor(props) {
    super(props);
    const { markdown } = props;
    // 서버사이드 렌더링에서도 마크다운 처리가 되도록 constructor 쪽에서도 구현합니다.
    this.state = {
      html: markdown ? marked(props.markdown, { breaks: true, sanitize: true }) : ''
    }
  }

  componentDidUpdate(prevProps, prevState) {
    // markdown 값이 변경되면 renderMarkdown을 호출합니다.
    if (prevProps.markdown !== this.props.markdown) {
      this.renderMarkdown();
    }
  }

  render() {
    const { html } = this.state;
     // React 에서 html 을 렌더링 하려면 객체를 만들어서 내부에
    // __html 값을 설정해야합니다.
    const markup = {
      __html: html
    };

    // 그리고, dangerouslySetInnerHTML 값에 해당 객체를 넣어주면 됩니다.
    return (
      <div>
        <div className={cx('markdown-render')} dangerouslySetInnerHTML={markup} />
      </div>
    );
  }
}

export default MarkdownRender;

컴포넌트를 만들 때 호출되는 constructor와 componentDidUpdate에서 마크다운 변환작업을 처리해 주었습니다.

constructor에서 마크다운 변환작업을 하는 이유는
constructor함수는 서버사이드 렌더링을 할 때도 호출하기 때문입니다.

그러나 이 작업을 componentDidMount에서 한다면 웹 브라우저 쪽에서만 실행하고, 나중에 서버쪽에서는 호출하지 않겠죠.

이제 MarkdownRender 컴포넌트를 사용할 차례입니다.
* PreviewPaneContainer를 만들어 주고,
* PreviewPane에서는 전달받은 markdown을 MarkdownRender를 사용하여 렌더링하겠습니다.