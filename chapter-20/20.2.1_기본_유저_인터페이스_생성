ListPage와 PostPage는 레이아웃이 동일합니다.
ListPage와 PostPage는 PageTemplate 컴포넌트로 감싸여 있습니다.
PageTemplate 컴포넌트는 위쪽에는 Header가, 아래쪽에는 Footer가 위치합니다.

● 컴포넌트 생성
  우리의 첫 유저 인터페이스 컴포넌트를 만들어 보겠습니다.
  컴포넌트는 종류별로 디렉토리를 나누어 만듭니다.
  Saas와 CSS 모듈을 사용하므로 각 컴포넌트마다 디렉토리를 하나씩 만들게 됩니다.

  우선 components 디렉토리에 common 디렉토리를 만드세요.
  common 디렉토리에는 페이지 두 개 이상에서 사용하는 컴포넌트들을 넣습니다.

  그리고 common 내부에 PageTemplate 디렉토리를 만들고, 다음 파일들을 생성하세요.
  [src/components/common/PageTemplate/PageTemplate.scss]
  .page-template {
  }

  [src/components/common/PageTemplate/PageTemplate.js]
  import React from 'react';
  import styles from './PageTemplate.scss';
  import classNames from 'classnames/bind';

  const cx = classNames.bind(styles);

  const PageTemplate = () => {
    return (
      <div className={cx('page-template')}>
        PageTemplate
      </div>
    );
  };

  export default PageTemplate;

  [src/components/common/PageTemplate/index.js]
  export { default } from './PageTemplate';

● generate-react-component
  앞으로 컴포넌트를 만들 때마다 이렇게 세 가지 파일을 생성할 텐데요.
  컴포넌트는 에디터의 스니펫 기능을 사용하면 자동 생성할 수 있어 편리합니다.
  더 유용한 방식은 VS Code의 generate-react-component를 사용하는 것입니다.

  이 확장 프로그램은 파일 탐색기에서 마우스 오른쪽 버튼을 눌러 Generate new component
  메뉴를 선택했을 때, 리액트 컴포넌트를 위한 디렉토리와 파일들을 자동으로, 원하는 설정으로 만들어 줍니다.

  generate-react-component를 설치하고 에디터를 재시작합니다.
  이 확장 프로그램의 기본 리액트 컴포넌트 템플릿은 Saas를 사용하지 않고, .css 파일을 활용한 CSS모듈을 사용합니다.
  따라서 이 템플릿을 커스터마이징해야 합니다.

  여러분의 편의를 고려해서 템플릿을 구성하여 깃허브 저장소에 올려놓았습니다.

  $ git clone https://github.com/vlpt-playground/react-sass-component-template.git
  $ cd react-sass-component-template/
  $ pwd
  /d/Documents/JavaScript/React/learning-react/react-sass-component-template

  pwd 명령어를 입력하면 현재 경로의 절대 경로가 나타날 것입니다.
  이 경로를 복사하여 VS Code의 환경설정에 넣어야 합니다.

  File>Preferences>Settings 메뉴에서  generate-react-component로 검색하여,
  [Generate-react-component: Component Template Path] 값을 템플릿이 위치한 절대경로로 설정하세요.

  이제 템플릿을 사용한 컴포넌트를 자동으로 만들 수 있습니다.
  common 디렉토리 아래에 Header와 Footer를 만듭니다.