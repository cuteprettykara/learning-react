이제 props로 받은 값들을 각 input에 설정하고,
변화가 일어나면 props로 전달받은 onChangeInput을 호출하겠습니다.

* 제목과 태그는 input 태그에 onChange 이벤트를 설정하여 값을 줄 수 있지만,
* CodeMirror는 initializeEditor 함수가 호출될 때 이벤트를 직접 등록해야 합니다.

또 props로 받은 markdown값을 CodeMirror 인스턴스에 반영해야 하기 때문에,
componentDidUpdate 부분에서 markdown값을 바꾸면 setValue를 사용하여 내용을 변경해 주어야 합니다.
이 과정에서 cursor 위치가 초기화될 수 있기 때문에 setCursor를 사용하여 cursro값을 유지해야 합니다.

[src/components/editor/EditorHeader/EditorPane.js]
...
class EditorPane extends Component {
  ...
  cursor = null // 에디터의 텍스트 cursor 위치

  initializeEditor = () => {
    this.codeMirror = CodeMirror(this.editor, {
      ...
    });
    this.codeMirror.on('change', this.handleChangeMarkdown);
  }

  componentDidMount() {
    this.initializeEditor();
  }

  handleChange = e => {
    const { onChangeInput } = this.props;
    const { value, name } = e.target;
    onChangeInput({name, value});
  }

  handleChangeMarkdown = doc => {
    const { onChangeInput } = this.props;
    this.cursor = doc.getCursor(); // 텍스트 cursor 위치 저장
    onChangeInput({
      name: 'markdown',
      value: doc.getValue()
    });
  }

  componentDidUpdate(prevProps, prevState) {
    // markdown이 변경되면 에디터의 값도 변경해줍니다.
    // 이 과정에서 텍스트 커서의 위치가 초기화되기 때문에,
    // 저장해둔 커서의 위치가 있으면 해당 위치로 설정합니다.
    if (prevProps.markdown !== this.props.markdown) {
      const { codeMirror, cursor } = this;
      if (!codeMirror) return; // 인스턴스가 아직 안 만들어진 경우
      codeMirror.setValue(this.props.markdown);
      if (!cursor) return;  // 커서가 없는 경우
      codeMirror.setCursor(cursor);
    }
  }

  render() {
    const { handleChange } = this;
    const { tags, title } = this.props;

    return (
      <div className={cx('editor-pane')}>
        <input
          ...
          value={title}
          onChange={handleChange}
        />
        <div className={cx('code-editor')} ref={ref => this.editor=ref}></div>
        <div className={cx('tags')}>
          <div className={cx('description')}>태그</div>
          <input
            ...
            value={tags}
            onChange={handleChange}
          />
        </div>
      </div>
    );
  }
}
...

코드 작성이 끝나면 에디터 페이지를 열어 제목, 내용, 태그를 입력해 보세요.
그리고 리덕스 개발자 도구를 확인하세요. 상태가 제대로 바뀌었나요?