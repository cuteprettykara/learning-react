기존에는 컴포넌트의 props로 JSX 형태를 받아 올 때 children 값을 사용했습니다.
하지만 지금 블로그 프로젝트에는 JSX 형태로 전달받아 사용할 내용이 세 종류나 됩니다.

각자 다른 곳에 렌더링해야 하므로, children을 사용하지 않고,
header, editor, preview라는 props를 받아 알맞은 곳에 렌더링해 줍니다.

● EditorTemplate 컴포넌트 생성
  [src/components/editor/EditorTemplate/EditorTemplate.js]
  import React, { Component } from 'react';
  import styles from './EditorTemplate.scss';
  import classNames from 'classnames/bind';

  const cx = classNames.bind(styles);

  class EditorTemplate extends Component {
    render() {
      const { header, editor, preview }  = this.props;

      return (
        <div className={cx('editor-template')}>
          {header}
          <div className={cx('panes')}>
            <div className={cx('pane', 'editor')}>
              {editor}
            </div>
            <div className={cx('pane', 'preview')}>
              {preview}
            </div>
          </div>
        </div>
      );
    }
  }

  export default EditorTemplate;

● EditorTemplate.scss
  일부 스타일은 이 컴포넌트의 레이아웃이 제대로 작동하는지 확인하는 임시 코드입니다.

  [src/components/editor/EditorTemplate/EditorTemplate.scss]
  // @import 'utils';
  @import 'styles/utils.scss';

  .editor-template {
    .panes {
      height: calc(100vh - 4rem); // 페이지 높이에서 EditorHeader 크기 빼기
      display: flex;
      background: $oc-gray-1; // 임시
      .pane {
        display: flex;
        flex: 1 // 임시
      }
    }
  }

● 이 컴포넌트를 EditorPage에서 렌더링
  [src/pages/EditorPage.js]
  ...
  import EditorTemplate from 'components/editor/EditorTemplate';

  const EditorPage = () => {
    return (
      <div>
        <EditorTemplate
          header="헤더"
          editor="에디터"
          preview="프리뷰"
        />
      </div>
    );
  };

  export default EditorPage;

● 웹 브라우저를 열어 컴포넌트가 잘 나타나는지 확인
  http://localhost:3000/editor

● 리사이즈 기능 구현
  각 영역 사이에 separator를 렌더링한 후, 이 DOM을 클릭할 때 이벤트를 등록합니다.
  커서 위치에 따라 state를 변경하고, 이 state에 따라 각 영역의 크기를 변경하여 리렌더링되도록 설정합니다.

  [src/components/editor/EditorTemplate/EditorTemplate.js]
  ...
  class EditorTemplate extends Component {
    state = {
      leftPercentage: 0.5
    }

    // separator 클릭 후 마우스를 움직이면 그에 따라 leftPercentage 업데이트
    handleMouseMove = (e) => {
      this.setState({
        leftPercentage: e.clientX / window.innerWidth
      });
    }

    // 마우스를 뗐을 때 등록한 이벤트 제거
    handleMouseUp = (e) => {
      document.body.removeEventListener('mousemove', this.handleMouseMove);
      window.removeEventListener('mouseup', this.handleMouseUp);
    }

    // separator 클릭 시
    handleSeparatorMouseDown = (e) => {
      document.body.addEventListener('mousemove', this.handleMouseMove);
      window.addEventListener('mouseup', this.handleMouseUp);
    }

    render() {
      ...
      const { leftPercentage } = this.state;
      const { handleSeparatorMouseDown } = this;

      // 각 영역에 flex 값 적용
      const leftStyle = {
        flex: leftPercentage
      };
      const rightStyle = {
        flex: 1 - leftPercentage
      };

      // separator 위치 설정
      const separatorStyle = {
        left: `${leftPercentage * 100}%`
      };

      return (
        <div className={cx('editor-template')}>
          {header}
          <div className={cx('panes')}>
            <div className={cx('pane', 'editor')} style={leftStyle}>
              {editor}
            </div>
            <div className={cx('pane', 'preview')} style={rightStyle}>
              {preview}
            </div>
            <div
              className={cx('separator')}
              style={separatorStyle}
              onMouseDown={handleSeparatorMouseDown}
            />
          </div>
        </div>
      );
    }
  }
  ...

  document.body와 window에 mousedown을 제외한 이벤트를 적용했습니다.
  mouseup과 mousemove 이벤트를 separator쪽에만 넣어 주면 마우스 커서가 separator 영역을 벗어났을 때
  제대로 이벤트를 실행하지 않기 때문입니다.

● 앞 코드가 제대로 동작하려면 separator를 위한 스타일도 작성해야 합니다.
  기존에 작성했던 임시 코드도 삭제하세요.
  [src/components/editor/EditorTemplate/EditorTemplate.scss]
  ...
  .editor-template {
    .panes {
      ...
      position: relative; // separator의 위치 설정을 위하여 relative로 설정
      .pane {
        ...
        min-width: 0; // 내부의 내용이 커도 반대편 영역을 침범하지 않게 해줍니다.
        overflow: auto; // 너무 많이 줄이면 스크롤바가 나타나게 해줍니다.
      }
      .separator {
        width: 1rem; // 클릭 영역을 넓게 설정하기 위함입니다.
        height: 100%;
        position: absolute;
        transform: translate(-50%); // 자신의 50%만큼 왼쪽으로 이동
        cursor: col-resize; // 리사이즈 커서
        background:black; // 임시
      }
    }
  }

● 다시 페이지를 열면 검은색 막대가 보일 것입니다. 이를 드래그하여 리사이즈가 잘되는지 확인해 보세요.
  작동이 잘되는 것을 확인했다면, 방금 수정한 EditorTemplate에서 임시 코드라고 주석으로 명시된 
  background:black; 부분을 삭제하세요.