이번 절에서 배운 세 가지 props는 라우트로 사용된 컴포넌트에서만 접근할 수 있었습니다.
즉, 라우트 내부 또는 외부 컴포넌트에서는 history, location, match 등 값을 사용할 수 없습니다.

예를 들어 우리가 만든 Menu 컴포넌트는 라우트 외부에 있기 때문에 이 세 가지 props를 사용할 수 없겠죠.
이때는 withRouter를 사용하여 해당 props에 접근할 수 있습니다.

* Menu 컴포넌트의 위쪽에서 withRouter를 불러온 후,
* 컴포넌트를 내보낼 때 withRouter 함수로 감싸 주면

Menu 컴포넌트에서도 history 등 객체를 사용할 수 있습니다.
[src/components/Menu.js]
import { NavLink, withRouter } from 'react-router-dom';

...

export default withRouter(Menu);

그 다음 리액트 개발자 도구를 열어서 Menu 컴포넌트를 조회해 보세요.

withRouter를 사용한 컴포넌트에서 match값은 현재 해당 컴포넌트가 위치한 상위 라우트의 정보입니다.
지금은 Menu 컴포넌트가 라우트 외부에 있으니 path는 /입니다.
Menu 컴포넌트를 PostPage 내부에 렌더링한다면 path는 /posts/:id 형식이 되겠지요?

withRouter는 주로 history에 접근하여 컴포넌트에서 라우터를 조작하는 데 사용합니다.

[정리]
큰 규모의 프로젝트를 진행하다 보면 한 가지 문제가 발생합니다.
최종 결과물인 자바스크립트 파일의 크기가 매우 커진다는 점입니다.

예를 들어 우리가 방금 만든 프로젝트에서는 사용자가 /about 페이지로 들어왔음에도,
당장 필요하지 않은 Post 관련 페이지 컴포넌트 정보도 함께 불러옵니다.

라우트에 따라 필요한 컴포넌트만 불러오고,
다른 컴포넌트는 다른 페이지를 방문할 때 불러오면 더 효유적이지 않을까요?

17장에서는 이런 단점을 보완해 주는 코드 스플리팅을 알아보겠습니다.