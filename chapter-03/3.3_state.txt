props는 부모 컴포넌트가 설정하며, 컴포넌트 자신은 해당 props를 [읽기 전]용으로만 사용할 수 있습니다.

컴포넌트 [내부]에서 [업데이트]할 수 있는 값을 사용하려면 state를 써야 합니다.
* 이것은 언제나 [기본값을 미리 설정해야 사용할 수 있으며]
* this.setState()로만 값을 업데이트해야 합니다.

[state 초깃값 설정 방법]
* 원래 state의 초깃값은 constructor 내부에서 설정합니다.
    constructor(props) {
        super(props);

        this.state = {
            number: 0
        }
    }

* state의 초깃값은 constructor 바깥에서 설정할 수도 있습니다.(transform-class-properties 문법)
    state = {   
        number: 0
    }

[state 값을 업데이트할 때 주의 사항]
* this.setState()로만 값을 업데이트해야 합니다.

* setState() 메소드가 하는 역할은 
  파라미터로 전달받은 필드를 업데이트한 후 컴포넌트가 리렌더링하도록 트리거하는 것입니다.
* state에 직접 접근하여 값을 수정하면 컴포넌트를 자동으로 리렌더링하지 않습니다.
* this.forceUpdate() 강제 호출은 피해야 합니다.

[그렇다면 배열이나 객체를 업데이트할 때는 어떻게 해야 할까요?]
1. 배열이나 객체의 사본을 만들고,
2. 그 사본에 값을 업데이트한 후,
3. 사본으로 값을 설정

props를 사용한다고 해서 값이 무조건 고정적인 것은 아닙니다.
부모 컴포넌트의 state를 자식 컴포넌트의 props로 전달하고,
자식 컴포넌트에서 특정 이벤트가 발생할 때, 부모 컴포넌트의 메소드를 호출하면 props도 유동적으로 사용할 수 있습니다.
-> 10장ㅇ서 이런 구조로 프로젝트를 설계할 것입니다.