state값을 업데이트할 때는 this.setState() 메소드를 사용합니다.

● 버튼을 하나 렌더링하고, 이 버튼을 누를 때마다 number 값이 1씩 증가하도록 설정
  [src/MyComponent.js]
  import React, { Component } from 'react';
  import PropTypes from 'prop-types';

  class MyComponent extends Component {

    static defaultProps = {
      name: '기본 이름'
    }

    static propTypes = {
      name: PropTypes.string,
      age: PropTypes.number.isRequired
    }

    state = {
      number: 0
    }

    render() {
      return (
        <div>
          <p>안녕하세요, 제 이름은 {this.props.name}입니다.</p>
          <p>저는 {this.props.age}살 입니다.</p>
          <p>숫자: {this.state.number}</p>
          <button
            onClick={() => this.setState({
              number: this.state.number + 1
            })}
          >
            더하기
          </button>
        </div>
      );
    }
  }

  export default MyComponent;

● state 값을 업데이트할 때 주의 사항
  * this.setState()로만 값을 업데이트해야 합니다.
    setState() 메소드가 하는 역할은
    [파라미터로 전달받은] 필드를 업데이트한 후 컴포넌트가 리렌더링하도록 트리거하는 것입니다.
  * state에 직접 접근하여 값을 수정하면 컴포넌트를 자동으로 리렌더링하지 않습니다.
  * this.forceUpdate() 강제 호출은 피해야 합니다.

  [그렇다면 배열이나 객체를 업데이트할 때는 어떻게 해야 할까요?]
  1. 배열이나 객체의 사본을 만들고,
  2. 그 사본에 값을 업데이트한 후,
  3. 사본으로 값을 설정

● props를 사용한다고 해서 값이 무조건 고정적인 것은 아닙니다.
  * 부모 컴포넌트의 state를 자식 컴포넌트의 props로 전달하고,
  * 자식 컴포넌트에서 특정 이벤트가 발생할 때, 부모 컴포넌트의 메소드를 호출하면 props도 유동적으로 사용할 수 있습니다.
  -> 10장에서 이런 구조로 프로젝트를 설계할 것입니다.