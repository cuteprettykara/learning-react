● 리액트에서 컴포넌트를 스타일링하는데 획일화된 방식은 없습니다.
  가장 기본적인 방식은 CSS 파일을 사용하는 것입니다.
  create-react-app으로 프로젝트를 만들면 CSS 파일을 사용하는 방식으로 컴포넌트를 스타일링합니다.
  이처럼 webpack의 css-loader를 이용하여 일반 CSS를 불러오는 방식이 있습니다.

● 리액트 프로젝트에서 스타일링을 할 때 자주 사용하는 방법
  * CSS Module
  * Sass : 확장된 CSS문법
  * styled-components: 요즘 인기있는 스타일링 방식, JS코드내부에서 스타일을 정의

● create-react-app v2부터는 Sass와 CSS Module을 yarn eject 하지 않고 사용 할 수 있습니다.

● CSS Module
  * CSS를 모듈화하여 사용하는 방식
  * CSS 클래스를 만들면 자동으로 [고유한 클래스네임]을 생성하여 스코프를 지역적으로 제한하는 방식
  * v2부터는 css파일을 생성할 때 파일이름.module.css 이런식으로 하면 CSS Module이 적용됩니다.

[src/css_module/App.module.css]
.box {
  display: inline-block;
  width: 100px;
  height: 100px;
  border: 1px solid black;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.blue {
  background: blue;
}

● 사용법 1: 클래스가 한 개일 때
  [src/css_module/App.js]
  ...
  import styles from './App.module.css';

  console.log(styles);  // {box: "App_box__FMHWv"}

  class App extends Component {
    render() {
      return (
        <div className={styles.box}></div>
      );
    }
  }

● 사용법 2: 클래스가 여러 개일 때
  styles.box도 결국 문자열 형태의 값이기 때문에 사이에 공백을 두고 합치면 됩니다.
  ...
  <div className={[styles.box, styles.blue].join(' ')}></div>
  ...

● 사용법 3: 클래스가 여러 개일 때
  $ yarn add classnames  // classnames 라이브러러 설치 후

  ...
  import classNames from 'classnames';
  ...
  <div className={classNames(styles.box, styles.blue)}></div>

● 사용법 4: 클래스가 여러 개일 때
  classNames의 bind 기능을 사용하면 좀 더 편합니다.
  => 클래스네임을 입력할 때 styles.을 생략할 수 있습니다.

  ...
  import classNames from 'classnames/bind';

  const cx = classNames.bind(styles);

  class App extends Component {
    render() {
      return (
        <div className={cx('box', 'blue')}></div>
      );
    }
  }

● classNames 사용 예제
  여태까지는 클래스 이름을 그냥 나열하기만 했는데, 이를 객체나 배열 형식 또는 혼용해서 전달할 수도 있습니다.

  classNames('foo', 'bar');           // 'foo bar'
  classNames('foo', {bar:true});      // 'foo bar'
  classNames({foo-bar:true});         // 'foo-bar'
  classNames({foo-bar:false});        // ' '
  classNames({foo:true}, {bar:true}); // 'foo bar'
  classNames({foo:true, bar:true});   // 'foo bar'
  classNames(['foo', 'bar']);         // 'foo bar'

  // false, null, 0, undefined는 무시됩니다.
  classNames(null, false, 'bar', undefined, 0, 1, {baz:null}, '');  // 'bar 1'

● 사용법 5: 조건부 스타일링
  객체 형식으로 사용하면 조건부 스타일링을 할 때 매우 편리합니다.

    ...
    class App extends Component {
      render() {
        // 지금은 isBlue값을 직접 설정했지만, 이 값을 props로 받아와 사용하면 손쉽게 
        // props에 따라 동적인 스타일을 줄 수 있습니다.
        const isBlue = true;

        return (
          <div className={cx('box', {blue:isBlue})}></div>
        );
      }
    }