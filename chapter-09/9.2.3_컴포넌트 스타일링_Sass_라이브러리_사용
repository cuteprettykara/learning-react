● Sass의 장점 중 하나는 스타일 관련 라이브러리들을 쉽게 불러와 사용할 수 있다는 것입니다.
  여기에서는 include-media 믹스인 라이브러리와 open-color 변수 세트 라이브러리를 사용하여 초록색 버튼을 만들어 보겠습니다.

  * include-media 믹스인 라이브러리는 반응형 디자인을 도와주며,
  * open-color 변수 세트 라이브러리에는 여러 가지 색상이 들어 있어, 색상을 쉽게 고를 수 있습니다.

● 우선 두 라이브러리를 설치하세요.
  $ yarn add include-media open-color

● 설치후에는 utils.scss 파일에서 불러와야 합니다.
  [src/sass/styles/utils.scss]
  @import '~open-color/open-color';
  @import '~include-media/dist/include-media';

  $breakpoints: (
    small: 376px,
    medium: 768px,
    large: 1024px,
    huge: 1200px
  );

  $size: 100px;

  @mixin place-at-center() {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  * npm 또는 yarn을 설치한 패키지 내부에 있는 파일을 불러올 때는 ~ 문자를 사용해서 node_modules에 접근할 수 있습니다.
  * 그리고 $breakpoints 변수를 설정해 주었는데요.
    여기에 있는 값은 추후 반응형 디자인을 위한 코드를 작성할 때 기준점으로 사용합니다.

● 버튼 생성
  버튼 컴포넌트는 src/sass/components/Button 디렉토리에 저장하겠습니다.
  해당 디렉토리에 다음 파일들을 만들어 보세요.
  * Button.js
  * Buttons.scss
  * index.js

  [src/components/Button/Button.js]
  import React from 'react';
  import styles from './Button.scss';
  import classNames from 'classnames/bind';

  const cx = classNames.bind(styles);

  const Button = ({children, ...rest}) => {
    return (
      <div className={cx('button')} {...rest}>
        {children}
      </div>
    );
  };

  export default Button;

  * ...rest는 나중에 이 컴포넌트가 받을 모든 props를 명시합니다.
  * JSX를 렌더링하는 부분에 {...rest}를 넣어 주었습니다.
    이는 객체 안에 있는 모든 값을 해당 DOM/컴포넌트의 props로 지정한다는 의미입니다.
    예를 들어, 객체 안에 onClick과 style이 들어 있다면 <div onClick={onClick} style={style}>
    같은 형식으로 렌더링됩니다.


  [src/sass/components/Button/Button.scss]
  @import '../../styles/utils.scss';

  .button {
    background: $oc-green-7;
    ...

    @include place-at-center();

    width: 1200px;

    // 반응형 디자인
    @include media("<huge") {
      width: 1024px;
    }

    @include media("<large") {
      width: 768px;
    }

    @include media("<medium") {
      width: 90%;
    }

    // 마우스 상태에 따라 다른 효과 지정
    &:hover {
      background: $oc-green-6;
    }
    &:active {
      margin-top: 3px;
      background: $oc-green-8;
    }
  }

  * open-color를 적용하면 변수를 사용하여 여러 가지 색상을 쉽게 적용할 수 있습니다.
    ◦ 변수 형식: '$oc-색상이름-명암'
    ◦ 색상 종류: https://yeun.github.io/open-color/

  * include-media를 적용하면 이전에 설정한 breakpoints에서 지정한 값들을 참조하여
    @include media('<huge) {...} 형식으로 작성합니다.

● 마지막으로 Button 디렉토리에 index.js 파일을 만들겠습니다.
  js파일과 css파일을 보기 쉽게 정리하려고 Button 디렉토리를 따로 만들었는데요.
  이러면 나중에 컴포넌트 파일을 불러올 때 './Button/Button' 형식으로 불러와야 합니다.
  Button을 두 번이나 입력해야 하니 보기 싫지요? 이를 더욱 깔끔하게 작성하려고 index.js 파일을 만듭니다.

  [src/sass/components/Button/index.js]
  import Button from './Button';
  export default Button;

  => 이 코드를 한 줄로도 작성할 수 있습니다.
  export { default } from './Button';

● App에서 렌더링
  [src/sass/App.js]
  import React, { Component } from 'react';
  import Button from './components/Button'; // ★ Button 한 번 입력

  class App extends Component {
    render() {
      return (
        <div>
          <Button>버튼</Button>
        </div>
      );
    }
  }

  export default App;