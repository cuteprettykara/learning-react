라우트를 설정하는 부분 중, 화살표 함수를 사용하여 라우트 처리 함수를 바로 선언할 수 있습니다.

  posts.get('/', ctx => {...});

하지만 각 라우트 처리 함수의 코드 길이가 길다면 라우터 설정을 한눈에 보기가 힘들어지기겠죠.
이 라우트 처리 함수들을 따로 다른 파일로 분리해서 관리할 수도 있습니다.
이 라우트 처리 함수만 모아 놓은 파일을 [컨트롤러]라고 합니다.
컨트롤러에서는 백엔드 기능을 구현합니다.

지금은 아직 데이터베이스를 연결하지 않았으므로, 자바스크립트의 배열 기능만 사용하여 임시로
기능을 구현해 보겠습니다.

● API 기능을 본격적으로 구현하기 전에 먼저 koa-bodyparser 미들웨어를 적용해야 합니다.
  이 미들웨어는 POST/PUT/PATCH 같은 메소드의 Request Body에 JSON 형식으로 데이터를 넣어 주면,
  이를 파싱하여 서버에서 사용할 수 있게 합니다.

  $ yarn add koa-bodyparser

● 그 다음에는 미들웨어를 불러와 적용하세요.
  주의할 점은 router를 설정하는 코드 윗부분에서 해야 한다는 것입니다.
  [src/index.js]
  ...
  const bodyParser = require('koa-bodyparser');

  ...

  // 라우터 설정
  router.use('/api', api.routes());

  // 라우터 적용 전에 bodyParser 적용
  app.use(bodyParser());

  // app 인스턴스에 라우터 적용
  ...

● src/api/posts/posts.ctrl.js 파일을 만든 후, 주석을 참고하면서 다음 코드를 입력하세요.
  [src/api/posts/posts.ctrl.js]
  let postId = 1; // id의 초깃값입니다.

  const posts = [
    {
      id: 1,
      title: '제목',
      body: '내용'
    }
  ];

  /*
    포스트 목록 조회
    GET /api/posts
  */
  exports.list = ctx => {
    ctx.body = posts;
  };

  /*
    특정 포스트 조회
    GET /api/posts/:id
  */
  exports.read = ctx => {
    const { id } = ctx.params;

    // 주어진 id값으로 포스트를 찾습니다.
    // 파라미터로 받아온 값은 문자열 형식이니 파라미터를 숫자로 변환하거나,
    // 비교할 p.id 값을 문자열로 변경해야 합니다.
    // const post = posts.find(p => p.id === parseInt(id));
    const post = posts.find(p => p.id.toString() === id);

    // 포스트가 없으면 오류를 반환합니다.
    if (!post) {
      ctx.status = 404;
      ctx.body = {
        message: '포스트가 존재하지 않습니다'
      };
      return;
    }

    ctx.body = post;
  };

  /*
    포스트 작성
    POST /api/posts
    {title, body}
  */
  exports.write = ctx => {
    // REST API의 request body는 ctx.request.body에서 조회할 수 있습니다.
    const { title, body } = ctx.request.body;

    postId = postId + 1;  // 기존 postId 값에 1을 더합니다.

    const post = { id: postId, title, body };

    posts.push(post);
    console.log(posts);

    ctx.body = post;
  };

  /*
    특정 포스트 제거
    DELETE /api/posts/:id
  */
  exports.remove = ctx => {
    const { id } = ctx.params;

    // 해당 id를 가진 post가 몇 번째인지 확인합니다.
    const index = posts.findIndex(p => p.id.toString() === id);

    // 포스트가 없으면 오류를 반환합니다.
    if (index === -1) {
      ctx.status = 404;
      ctx.body = {
        message: '포스트가 존재하지 않습니다'
      };
      return;
    }

    // index 번째 아이템을 제거합니다.
    posts.splice(index, 1);
    ctx.status = 204;   // No Content
  };

  /*
    포스트 수정(교체)
    PUT /api/posts/:id
    {title, body}
  */
  exports.replace = ctx => {
    // PUT 메소드는 전체 포스트 정보를 입력하여 데이터를 통째로 교체할 때 사용합니다.
    const { id } = ctx.params;

    // 해당 id를 가진 post가 몇 번째인지 확인합니다.
    const index = posts.findIndex(p => p.id.toString() === id);

    // 포스트가 없으면 오류를 반환합니다.
    if (index === -1) {
      ctx.status = 404;
      ctx.body = {
        message: '포스트가 존재하지 않습니다'
      };
      return;
    }

    // 전체 객체를 덮어씌웁니다.
    // 따라서 id를 제외한 기존 정보를 날리고, 객체를 새로 만듭니다.
    posts[index] = {
      id,
      ...ctx.request.body
    };

    ctx.body = posts[index];
  };

  /*
    포스트 수정(특정 필드 변경)
    PATCH /api/posts/:id
    {title, body}
  */
  exports.update = ctx => {
    // PATCH 메소드는 주어진 필드만 교체합니다.
    const { id } = ctx.params;

    // 해당 id를 가진 post가 몇 번째인지 확인합니다.
    const index = posts.findIndex(p => p.id.toString() === id);

    // 포스트가 없으면 오류를 반환합니다.
    if (index === -1) {
      ctx.status = 404;
      ctx.body = {
        message: '포스트가 존재하지 않습니다'
      };
      return;
    }

    // 기존 값에 정보를 덮어씌웁니다.
    posts[index] = {
      ...posts[index],
      ...ctx.request.body
    };

    ctx.body = posts[index];
  };

● 이제 우리가 만든 컨트롤러 함수들을 각 라우트에 연결해 보세요.
  [src/api/posts/index.js]
  ...
  const postsCtrl = require('./posts.ctrl');

  ...

  posts.get('/', postsCtrl.list);
  posts.post('/', postsCtrl.write);
  posts.get('/:id', postsCtrl.read);
  posts.delete('/:id', postsCtrl.remove);
  posts.put('/:id', postsCtrl.replace);
  posts.patch('/:id', postsCtrl.update);
  ...

  #요청
  PATCH http://localhost:4000/api/posts/1
  {
	  "title": "변경됨"
  }

  #결과
  {
    "id": 1,
    "title": "변경됨",
    "body": "내용"
  }
  => PATCH로 했을 경우 : 기존 body 내용을 유지, Request Body로 전달한 값만 변경


  #요청
  PUT http://localhost:4000/api/posts/1
  {
	  "title": "변경됨"
  }

   #결과
  {
    "id": "1",
    "title": "변경됨"
  }
  => PUT으로 했을 경우 : 기존 body가 사라졌습니다.