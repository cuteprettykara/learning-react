Koa 애플리케이션은 미들웨어의 배열로 구성되어 있습니다.

app.use 함수는 미들웨어를 애플리케이션에 등록합니다.

  app.use(ctx => {
    ctx.body = 'hello world';
  });

Koa의 미들웨어 함수에서는 두 가지 파라미터를 받습니다.
* ctx : 웹 요청과 응답 정보를 지니고 있습니다.
* next: 현재 처리중인 미들웨어의 다음 미들웨어를 호출하는 함수입니다.

● 미들웨어는 app.use로 등록하는 순서대로 처리합니다.
  [src/index.js]
  ...
  app.use(() => console.log(1));

  app.use(() => console.log(2));

  app.use(ctx => {
    ctx.body = 'hello world';
  });
  ...

● 서버를 종료한 후 다시 실행해 보세요.
  웹 브라우저로 http://localhost:4000/에 다시 접속하면,
  * 웹 브라우저에는 응답으로 Not Found가 뜨고,
  * 터미널에는 1이 기록됩니다.

  [터미널]
  $ node src
  listening to port 4000
  1

  첫 번째 미들웨어만 처리하고, 나머지는 무시했지요?
  이는 next를 호출하지 않았기 때문입니다.

● 이번에는 함수의 파라미터에서 next를 받아와서 호출해 볼까요?
 [src/index.js]
  ...
  app.use((ctx, next) => {
    console.log(1);
    next();
  });

  app.use((ctx, next) => {
    console.log(2);
    next();
  });
  ...

● 서버를 재시작하고 웹 브라우저로 페이지를 새로고침해 보세요.
  [터미널]
  $ node src
  listening to port 4000
  1
  2

● next()는 프로미스다.
  next를 실행하면 프로미스를 반환합니다.
  따라서 작업이 끝나고 난 후, 특정 작업을 수행할 수도 있습니다.
  [첫 번째 미들웨어]
  app.use((ctx, next) => {
    console.log(1);
    next().then(() => {
      console.log('bye');
    });
  });

  [터미널]
  $ node src
  listening to port 4000
  1
  2
  bye

● async/await 사용
  Koa에서는 async/await를 정식으로 지원합니다.
  => Express는 아직 정식으로 지원하지 않으므로 오류를 처리하는 부분이 제대로 작동하지 않아 편법을 써야 합니다

  async/await는 서버에서 매우 유용하게 사용합니다.
  특히 데이터베이스에 요청할 때 [콜백을 사용할 필요가 없으므로] 코드를 깔끔하게 작성할 수 있습니다.

  작업이 끝나면 bye라고 콘솔에 기록하는 미들웨어를 async/await를 사용하여 구현해 보겠습니다.
  [첫 번째 미들웨어]
  app.use(async (ctx, next) => {
    console.log(1);
    await next();
    console.log('bye');
  });

  [터미널]
  $ node src
  listening to port 4000
  1
  2
  bye