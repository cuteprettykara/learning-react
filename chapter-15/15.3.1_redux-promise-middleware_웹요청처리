* 설치
  $ yarn add redux-promise-middleware

* [Promise 객체를 payload로 전달]하면 요청을 시작,성공,실패할 때 액션의 뒷부분에
  _PENDING, _FULFILLED, _REJECTED를 붙여서 반환합니다.
  따라서 각 액션 타입을 일일이 선언할 필요가 없죠.

* 뒷 부분에 붙는 접미사는 커스터마이징할 수도 있는데요. 우리의 기존 코드에서는
  FULFILLED, REJECTED 대신 SUCCESS, FAILURE를 사용하니 이를 임의의 값으로 설정하겠습니다.

  [src/store.js]
  1. (5.X 버전)
  ...
  import promiseMiddleware from 'redux-promise-middleware';

  const logger = createLogger();
  const pm = promiseMiddleware({
    promiseTypeSuffixes: ['PENDING', 'SUCCESS', 'FAILURE']
  });

  const store = createStore(modules, applyMiddleware(logger, pm));
  ...

  2. (6.X 버전)
  ...
  import { createStore, applyMiddleware, compose} from 'redux';
  import { createPromise } from "redux-promise-middleware";

  const logger = createLogger();
  const cp = createPromise({
    promiseTypeSuffixes: ['PENDING', 'SUCCESS', 'FAILURE']
  });

  const store = createStore(modules, compose(
    applyMiddleware(logger, cp),
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
  ));
  ...

* 액션 생성자 수정
  [src/post.js]
  import { handleActions } from 'redux-actions';
  import axios from 'axios';

  function getPostAPI(postId) {
    return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);
  }

  const GET_POST = 'GET_POST';  // 추가
  const GET_POST_PENDING = 'GET_POST_PENDING';
  const GET_POST_SUCCESS = 'GET_POST_SUCCESS';
  const GET_POST_FAILURE = 'GET_POST_FAILURE';

  export const getPost = (postId) => ({
    type: GET_POST,
    payload: getPostAPI(postId)
  });

  const initialState = {
    ...
  };

  export default handleActions({
    ...
  }, initialState);

* 어떤가요? 코드가 많이 깔끔하죠?
  기존 thunk 함수에서는

  1. 요청을 시작했을 때 PENDING을 날려주고
  2. 성공하거나 실패했을 때에 따라 SUCCESS 또는 FAILURE 액션을 디스패치해야 했지만,

  reudx-promise-middleware를 사용하면 자동으로 이 작업을 해줍니다.

* 이 방법도 충분히 편하지만, 아직 번거로운 점이 조금 남아 있습니다.
  우리가 웹 요청을 할 때 가장 신경 쓰는 부분은 해당 요청 결과가 어떻고,
  그에 대해서 어떻게 상태를 업데이트할지입니다.

* 이는 해당 요청이 현재 진행중인지, 오류가 발생했는지 매번 관리해주어야 합니다.
  그래야 로딩 중일 때는 사용자가 로딩 중임을 알 수 있도록 스피너 또는 로더를 띄우고,
  실패했을 때는 오류 정보의 상태를 담아 줄 수 있으니까요.

* 이를 위하여 여전히 PENDING, SUCCESS, FAILURE에 대한 액션 타입을 정의해야 하고,
  리듀서에서도 이 액션들에 따라 요청 상태를 바꾸어 주어야 합니다.

* 요청 개수가 늘어날수록 이런 작업을 반복적으로 해야겠지요?
  다음 절에서 배울 redux-pender를 사용하면 이런 반복적인 작업을 자동화할 수 있습니다.