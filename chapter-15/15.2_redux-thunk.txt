● thunk
  특정 작업을 나중에 할 수 있도록 미루려고 [함수 형태]로 감싼 것

● redux-thunk
  이 미들웨어는 [객체]가 아닌 [함수]도 디스패치할 수 있게 합니다.
  일반 액션 객체로는 특정 액션을 디스패치한 후

  * [몇 초 뒤에] 반영시키거나
  * [현재 상태]에 따라 아예 무시하게 만들 수 없습니다.

  redux-thunk 미들웨어는 [함수를 디스패치]할 수 있게 함으로써 일반 액션 객체로는 할 수 없는
  작업들도 할 수 있게 합니다.

    const INCREMENT_COUNTER = 'INCREMENT_COUNTER';

    function increment() {
      return {
        type: INCREMENT_COUNTER
      };
    };

  * 1초 뒤에 액션이 디스패치되는 예제 코드

    function incrementAsync() { //thunk 생성 함수
      return dispatch => {
        // 1초 뒤 액션 디스패치
        setTimeout(() => {
          dispatch(increment());
        }, 1000);
      }
    }

    store.dispatch(incrementAsync());

  * 현재 상태에 따라 액션을 디스패치하거나 무시하는 예제 코드

    function incrementIfOdd() { //thunk 생성 함수
      return (dispatch, getState) => {
        const { counter } = getState();

        if (counter % 2 === 0) return;

        dispatch(increment());
      };
    }

    store.dispatch(incrementIfOdd());

● thunk 생성 함수
  객체가 아니라 함수(dispatch와 getState를 파라미터로 가지는 함수)를 반환하는 함수.

● 설치
  $ yarn add redux-thunk

● 적용
  [src/store.js]
  ...
  import ReduxThunk from 'redux-thunk';

  ...
  const store = createStore(modules, applyMiddleware(logger, ReduxThunk));
  ...
