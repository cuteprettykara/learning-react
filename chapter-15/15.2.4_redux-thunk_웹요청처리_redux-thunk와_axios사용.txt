이제 redux-thunk를 사용하여 웹 요청을 해보겠습니다.

1.modules 디렉토리에 post  모듈을 만드세요.
  그리고 API함수와 액션, 액션생성함수를 정의하세요.
  [src/modules/post.js]
  import { createAction, handleActions } from 'redux-actions';
  import axios from 'axios';

  function getPostAPI(postId) {
    return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);
  }

  const GET_POST_PENDING = 'GET_POST_PENDING';
  const GET_POST_SUCCESS = 'GET_POST_SUCCESS';
  const GET_POST_FAILURE = 'GET_POST_FAILURE';

  const getPostPending = createAction(GET_POST_PENDING);
  const getPostSuccess = createAction(GET_POST_SUCCESS);
  const getPostFailure = createAction(GET_POST_FAILURE);

2.다음으로 thunk를 만들어 요청 상태에 따라 액션을 디스패치하세요.
  export const getPost = postId => dispatch => {
    // 먼저 요청이 시작했다는 것을 알립니다.
    dispatch(getPostPending());

    // 요청을 시작합니다.
    // 여기에서 만든 promise를 return해야 나중에 컴포넌트에서 호출할 때
    // getPost().then(...)을 할 수 있습니다.
    return getPostAPI(postId)
      .then(response => {
        // GET_POST_SUCCESS 액션을 dispatch
        dispatch(getPostSuccess(response));

        // 나중에 getPostAPI.then을 했을 때 then에 전달하는 함수에서
        // response에 접근할 수 있게 합니다.
        return response;
      })
      .catch(error => {
        // GET_POST_FAILURE 액션을 dispatch
        dispatch(getPostFailure(error));

        // error를 throw하여 이 함수를 실행한 후,
        // 다시 한 번 catch를 할 수 있게 합니다.
        throw(error);
      });
  };

3.리듀서의 초기상태를 정의하고, handleActions를 사용하여 리듀서 함수를 구현해 보세요.
  const initialState = {
    pending: false,
    error: false,
    data: {
      title: '',
      body: ''
    }
  }

  export default handleActions({
    [GET_POST_PENDING]: (state, action) => {
      return {
        ...state,
        pending: true,
        error: false
      };
    },
    [GET_POST_SUCCESS]: (state, action) => {
      const { title, body } = action.payload.data;

      return {
        ...state,
        pending: false,
        data: {
          title: title,
          body: body
        }
      };
    },
    [GET_POST_FAILURE]: (state, action) => {
      return {
        ...state,
        pending: false,
        error: true
      };
    }
  }, initialState);

4.새 모듈을 만들었으니, 이 모듈의 리듀서를 루트 리듀서에도 넣어 주세요.
  [src/modules/index.js]
  ...
  import post from './post';

  export default combineReducers({
      counter,
      post
  });

5.이제 곧 컴포넌트에서 방금 만든 리덕스 모듈을 사용할 것입니다.
  그 전에 카운터의 기본값을 1로 설정하세요.
  카운터 숫자를 postId로 사용하여 포스트를 요청할 것이기 때문입니다.
  (postId가 0이면 오류가 발생합니다).

  [src/modules/counter.js]
  export default handleActions({
    [INCREMENT]: (state, action) => state + 1,
    [DECREMENT]: (state, action) => state - 1
  }, 1);