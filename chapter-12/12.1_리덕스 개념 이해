● 용어정리
  * 액션    : 상태 변화를 일으킬 때 참조하는 [객체]
  * 디스패치: 액션을 스토어에 전달하는 것
  * 리듀서  : 상태를 변화시키는 로직이 있는 [함수]

● 리액트를 사용하지 않아도 리덕스를 사용할 수 있습니다.

1.JSBin 준비
  * CDN을 이용하여 리덕스를 불러온다.
    <body>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.6.0/redux.js"></script>
    </body>
  * console.log(Redux);를 실행하여 확인한다.

2.액션과 액션 생성 함수
  * 액션은 type값을 반드시 가지고 있어야 합니다(나머지는 선택).
  * 액션 type은 해당 액션이 어떤 작업을 하는지 정의(대문자와 밑줄 조합)
    ex) 액션 객체 예: { type: INCREMENT } => 수치를 어떻게 업데이트할지는 리듀서 함수에서 정의
    ex) 일정관리 애플리케이션에서 새 일정을 만드는 액션
      {
        type: 'INSERT_TODO',
        text: '리액트 배우기'
      }
      또는 다음과 같이 '객체' 형태로 넣을 수도 있습니다.
      {
        type: 'INSERT_TODO',
        todo: {
          id: 1,
          text: '리액트 배우기',
          done: false
        }
      }

  * 액션을 만들 때마다 직접 객체를 만들어 준다면 액션 형식을 모두 꿰고 있어야 하므로 불편합니다.
    그래서 보통 액션을 만들어 주는 함수를 사용합니다. 이를 [액션 생성 함수](action creator)라고 합니다.
    ex) 숫자의 값을 더하고 빼는 카운터
      const INCREMENT = 'INCREMENT';
      const DECREMENT = 'DECREMENT';

      const increment = () => ({
        type: INCREMENT
      });
      const decrement = () => ({
        type: DECREMENT
      });

  * 액션 객체에 type 외의 값이 없다면 이렇게 정의하면 됩니다. 하지만 유동적인 값이 들어가야 한다면
    다음과 같이 파라미터를 넣어서 액션을 만듭니다.
      const increment = (diff) => ({
        type: INCREMENT,
        diff: diff
      });
      const decrement = (diff) => ({
        type: DECREMENT,
        diff: diff
      });

  * 액션을 제대로 만들었는지 확인
      console.log(increment(1));

       // console 화면
      [object Object] {
        diff: 1,
        type: "INCREMENT"
      }

3.변화를 일으키는 함수 리듀서
  * 리듀서는 파라미터를 두 개 받습니다.
    * 첫 번째 파라미터: 현재 상태,
    * 두 번재 파라미터: 액션 객체

  * 리듀서가 사용할 초기 상태 initialState 값부터 먼저 설정해야 리듀서를 만들 수 있습니다.
      const initialState = {
        number: 1
      }

  * 이제 리듀서를 만들어 보겠습니다.
      function counter(state = initialState, action) {
        switch(action.type) {
          case INCREMENT:
            return { number: state.number + action.diff };
          case DECREMENT:
            return { number: state.number - action.diff };
          default:
            return state;
        }
      }

  * 지금은 number값만 설정했는데, number말고 다른 값이 있으면 어떻게 해야 할까요?
      const initialState = {
        number: 1,
        foo: 'bar',
        baz: 'qux'
      }

      function counter(state = initialState, action) {
        switch(action.type) {
          case INCREMENT:
            return Object.assign({}, state, {
              number: state.number + action.diff
            });
          case DECREMENT:
            return Object.assign({}, state, {
              number: state.number - action.diff
            });
          default:
            return state;
        }
      }

  * 리덕스에서 상태를 업데이트 할 때는 컴포넌트의 state를 다룰 때처럼, 값을 [직접] 수정하면 안 됩니다.
    새로운 객체를 만든 후, 그 안에 상태를 정의해야 합니다.
    Object.assign 함수를 실행하면 파라미터로 전달된 객체들을 [왼쪽으로] 덮어쓰면서 새 객체를 만들어 줍니다.

  * ES6의 전개 연산자를 사용하면 더욱 깔끔하게 만들 수 있습니다.
      function counter(state = initialState, action) {
        switch(action.type) {
          case INCREMENT:
            return {
              ...state,
              number: state.number + action.diff
            };
          case DECREMENT:
            return {
              ...state,
              number: state.number - action.diff
            };
          default:
            return state;
        }
      }

  * 리듀서를 제대로 만들었는지 확인
      console.log(counter(undefined, increment(1)));

      // console 화면
      [object Object] {
        baz: "qux",
        foo: "bar",
        number: 2
      }

      => number가 1에서 2로 변경되었습니다.

  * ★리덕스를 사용하면★ 이렇게 [리듀서 함수]를 [직접] 실행하는 일은 없습니다.
    이 함수를 실행하는 작업은 리덕스 몫입니다.

4.리덕스 스토어 생성
  * 액션과 리듀서가 준비되면 리덕스 스토어를 만들 수 있습니다.
      const { createStore } = Redux;
      /*
        나중에 우리가 실제로 프로젝트에서 불러올 때는
        import { createStore } from 'redux';
        이렇게 불러옵니다.
      */
      const store = createStore(counter);

  * 스토어를 생성할 때는 createStore() 함수를 사용합니다.
    파라미터로는 리듀서 함수가 들어가고,
    두 번째 파라미터를 설정하면      해당 값을 스토어의 기본 값으로 사용합니다.
    두 번째 파라미터를 생략하면 리듀서 초기값을 스토어의 기본값으로 사용합니다.


5.구독
  * 리액트 컴포넌트에서 리덕스 스토어를 구독(subscribe)하는 작업은 나중에 react-redux의 connect
    함수가 대신합니다. 따라서 리덕스 내장 함수 subscribe를 직접적으로 사용할 일은 별로 없습니다.

  * 리덕스 스토어를 구독한다는 것은
    * 리덕스 스토어의 상태가 바뀔 때마다
    * ★특정 함수를 실행★시킨다는 의미입니다.

    ex) 리덕스 스토어를 구독하여 상태가 바뀔 때의 상태를 콘솔에 기록
      const unsbscribe = store.subscribe(() => {
        console.log(store.getState());
      });


6.dispatch로 액션 전달
  store.dispatch(increment(1));
  store.dispatch(decrement(5));
  store.dispatch(increment(10));

  // console 화면
  [object Object] {
    baz: "qux",
    foo: "bar",
    number: 2
  }
  [object Object] {
    baz: "qux",
    foo: "bar",
    number: -3
  }
  [object Object] {
    baz: "qux",
    foo: "bar",
    number: 7
  }