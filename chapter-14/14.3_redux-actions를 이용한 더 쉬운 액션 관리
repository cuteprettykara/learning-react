redux-actions 패키지에는 리덕스 액션들을 관리할 때 유용한 createAction과 handleActions
함수가 있습니다. 이 함수들은 다음과 같이 설치하고 사용하빈다.

$ yarn add redux-actions

import { createAction, handleActions } from 'redux-actions';

● createAction을 이용한 액션 생성 자동화
  리덕스에서 액션을 만들다 보면 모든 액션에서 일일이 액션 생성자를 만드는 것이 번거로울 수 있습니다.
  예를 들어 우리가 기존에 만든 increment와 decrement 코드를 살펴봅시다.

  export const increment = index => ({
    type: types.INCREMENT,
    index
  });

  export const decrement = index => ({
    type: types.DECREMENT,
    index
  });

  그냥 파라미터로 전달받은 값을 객체 안에 넣는 것뿐인데, 이를 좀 더 편하게 자동화하는 방법이 있지 않을까요?
  createAction을 사용하면 이 작업을 다음과 같이 편하게 자동화할 수 있습니다.

  export const increment = createAction(types.INCREMENT);
  export const decrement = createAction(types.DECREMENT);

  파라미터를 받는 부분이 생략되어 있지요?
  이렇게 만든 함수에 파라미터를 넣어서 호출하면 다음과 같이 payload 키에 파라미터로 받은 값을 넣어 객체를 만들어 줍니다.

  increment(3);
  /* 결과:
    {
      type: types.INCREMENT,
      payload: 3
    }
  */

  전달받을 파라미터가 여러 개일 때는 이전에 setColor 액션 생성 함수를 사용할 때처럼 객체를 만들어서 넣어주세요.

  export const setColor = createAction(types.SET_COLOR);

  setColor({index: 5, color: '#fff'});
  /* 결과:
    {
      type: types.SET_COLOR,
      payload: {
        index: 5,
        color: '#fff'
      }
    }
  */

  액션이 갖고 있을 수 있는 정보의 이름을 [payload로 통일]함으로써 액션 생성 함수를 한 줄짜리 코드로 작성했습니다.

  어떤 파라미터를 받는지 명시하지 않았기 때문에 헷갈릴 수도 있겠죠? 다음과 같이 createAction의 두 번째 파라미터에
  [payload 생성 함수]를 전달하여 코드상으로도 명시해 줄 수도 있습니다.

  export const setColor = createAction(types.SET_COLOR, ({index, color}) => ({index, color}));

● switch문 대신 handleActions 사용
  우리는 리듀서에 switch문을 사용하여 액션 type에 따라 다른 작업을 하도록 했습니다.

  이 방식에는 아주 중요한 결점이 하나 있습니다. 바로 scope를 리듀서 함수로 설정했다는 것이지요.
  * 그렇기 때문에 서로 다른 case에서 let이나 const를 사용하여 변수를 선언하려고 할 때, 같은 이름이 중첩되어 있으면 오류가 발생합니다.
  * 그렇다고 case마다 함수를 정의하면 코드를 읽기 힘들겠죠.

  이 문제를 해결하는 것이 바로 handleActions입니다.

  // 첫 번째 파라미터: 액션에 따라 실행할 함수들을 가진 객체
  // 두 번째 파라미터: 상태의 기본값(initialState)
  const reducer = handleActions({
    [INCREMENT]: (state, action) => ({
      counter: state.counter + action.payload
    }),
    [DECREMENT]: (state, action) => ({
      counter: state.counter - action.payload
    })
  }, {counter: 0});