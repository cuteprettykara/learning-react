* Immutable의 List는 [배열 대신] 사용하는 데이터 구조입니다.

* 배열과 동일하게 map, filter, sort, push, pop 함수를 내장하고 있습니다.
  => 이 내장함수를 실행하면 List자체를 변경하는 것이 아니라, [새로운 List를 반환]한다는 것을 꼭 기억하세요.

* 리액트 컴포넌트는 List 데이터 구조와 호환이 되기 때문에,
  map함수를 사용하여 데이터가 들어 있는 List를 컴포넌트 List로 변환하여 JSX에서 보여주어도 제대로 렌더링됩니다.


● 생성
  const { List } = Immutable;
  const list = List([0, 1, 2, 3, 4]);

  * [객체들의 List]를 만들어야 할 때는 다음과 같이 객체들을 Map으로 만들어야 추후 get과 set을 사용할 수 있습니다.
    const { List, Map, fromJS } = Immutable;

    const list = List([
      Map({ value: 1 }),
      Map({ value: 2 })
    ]);

    // or
    const list = fromJS([
      { value: 1},
      { value: 2}
    ]);
    => fromJS를 사용하면 내부 배열은 List로 만들고, 내부 객체는 Map으로 만듭니다.

  * Map과 마찬가지로, List도 toJS를 사용하여 일반 배열로 변환할 수 있습니다.
    이 과정에서 내부에 있는 Map 객체들도 자바스크립트 객체로 변환됩니다.

● 값 읽어 오기
  * n 번째 원소 값은 get(n)을 사용하여 읽어 옵니다.
    list.get(0);

  * 0번째 아이템의 value값은 다음과 같이 읽어 옵니다.
    list.getIn([0, 'value']);

● 아이템 수정
  * 원소를 통째로 바꾸고 싶을 때
    const newList = list.set(0, Map{value: 10});

  * 원소의 Map 내부 값을 변경하고 싶을 때
    const newList = list.setIn([0, 'value'], 10);

  * 값을 업데이트해야 하는데, 기존 값을 참조해야 할 경우
    const newList = list.update(0, item => item.set('value', item.get('value') * 5));

  * update를 사용하지 않는다면
    const newList = list.setIn([0, 'value'], list.getIn([0, 'value']*5));

● 아이템 추가
  * 맨 뒤에 추가
    const newList = list.push(Map({value:3}));    // 새로운 List가 반환

  * 맨 앞에 추가
    const newList = list.unshift(Map({value:3})); // 새로운 List가 반환

● 아이템 제거
  * delete 이용
    const newList = list.delete(1);

  * 내장함수 이용
    const newList = list.pop();   // 마지막 아이템 제거

● List 크기 가져오기
  * length가 아니라, size를 참조해야 합니다.
    list.size;

  * 비어 있는지 확인하고 싶다면 isEmpty() 사용
    list.isEmpty();

※ 참고: https://facebook.github.io/immutable-js/