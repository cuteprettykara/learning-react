● 컴포넌트에 ref 속성 추가
  컴포넌트 내부에 있는 DOM을 컴포넌트 외부에서 사용할 때 씁니다.
  ex) <MyComponent ref={ref => this.myComponent = ref} />
      => 이렇게 하면 MyComponent 내부의 메소드 및 멤버변수에도 접근할 수 있습니다.
      => 즉, 컴포넌트 내부의 ref에도 접근할 수 있습니다.
         myComponent.handleClick(), myComponent.input 등...

1.컴포넌트 초기 설정
  [src/ScrollBox.js]
  import React, { Component } from 'react';

  class Scrollbox extends Component {
    render() {
      const style = {
        border: '1px solid black',
        height: '300px',
        width: '300px',
        overflow: 'auto',
        position: 'relative'
      };

      const innerStyle = {
        width: '100%',
        height: '650px',
        background: 'linear-gradient(white, black)'
      };

      return (
        <div style={style} ref={ref => this.box = ref}>
            <div style={innerStyle}/>
        </div>
      );
    }
  }

  export default Scrollbox;

  [src/App.js]
  생략...

2.Scrollbox 컴포넌트에 메소드 생성
  컴포넌트에 스크롤바를 맨 아래쪽으로 내리는 메소드를 만듭니다.
  DOM 노드가 가진 다음 값들을 사용합니다.
  * scrollTop: 세로 스크롤바 위치(0~350)
  * scrollHeight: 스크롤 박스 내부의 높이(650)
  * clientHeight: 스크롤 박스 외부의 높이(300)

  [src/ScrollBox.js]
  scrollToBottom = () => {
    const { scrollHeight, clientHeight } = this.box;
    this.box.scrollTop = scrollHeight - clientHeight;
  }

3.App컴포넌트에 ref달고 내부 메소드 사용
  [src/App.js]
  ...
  class App extends Component {
    render() {
      return (
        <div>
          <ScrollBox ref={ref => this.scrollBox = ref}/>
          <button onClick={() => this.scrollBox.scrollToBottom()}>맨 밑으로</button>
        </div>
      );
    }
  }

※주의할 점
  문법상으로는 onClick={this.scrollBox.scrollToBottom} 형식도 틀린 것은 아닙니다.
  하지만 컴포넌트가 처음 렌더링 될 때는 this.scrollBox 값이 undefined이므로,
  this.scrollBox.scrollToBottom 값을 읽어오는 과정에서 오류가 발생합니다.

  화살표 함수 문법으로 아예 새로운 함수를 만들고, 그 내부에서 this.scrollBox.scrollToBottom 메소드를 실행하면,
  버튼을 누를 때(이미 한 번 렌더링을 해서 this.scrollBox를 설정한 시점) this.scrollBox.scrollToBottom 값을 읽어 와서
  실행하므로 오류가 발생하지 않습니다.

★ 결론: ref를 사용하지 않고도 원하는 기능을 구현할 수 있는지 꼭 고려한 후에 사용하세요.