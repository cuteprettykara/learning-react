● 우리가 기존에 작성했던 로직들을 모두 새로 작성할 것이므로 기존 코드는 다 지웁니다.
  [src/api/posts/posts.ctrl.js]
  const Post = require('models/post');

  exports.write = ctx => {

  };

  exports.list = ctx => {

  };

  exports.read = ctx => {

  };

  exports.remove = ctx => {

  };

  exports.update = ctx => {

  };

● 기존 PUT 메소드에 연결했던 replace는 구현하지 않을 것이므로, 제거했습니다.
  이에 따라 posts 라우트의 PUT 메소드를 설정한 부분도 제거하세요.
  [src/api/posts/index.js]
  ...
  posts.get('/', postsCtrl.list);
  posts.post('/', postsCtrl.write);
  posts.get('/:id', postsCtrl.read);
  posts.delete('/:id', postsCtrl.remove);
  /* posts.put('/:id', postsCtrl.replace); */
  posts.patch('/:id', postsCtrl.update);
  ...

● 데이터를 만드는 함수인 write를 먼저 구현해 봅시다.
  [src/api/posts/posts.ctrl.js]
  /*
    포스트 작성
    POST /api/posts
    {title, body, tags}
  */
  exports.write = async ctx => {
    const { title, body, tags } = ctx.request.body;

    // 새 Post 인스턴스를 만듭니다.
    const post = new Post({
      title, body, tags
    });

    try {
      await post.save();  // DB에 등록합니다.
      ctx.body = post;    // 저장결과를 반환합니다.
    } catch (e) {
      ctx.throw(e, 500);
    }
  };

  .save() 함수를 실행시켜야 비로소 DB에 저장됩니다.
  이 함수의 반환값은 Promise여서 DB 저장 요청을 완료할 때까지 await를 사용하여 대기할 수 있습니다.

  await를 사용하려면
  * 함수를 선언하는 부분 앞에 async 키워드를 넣어야 하고,
  * try~catch 문으로 오류를 처리해야 합니다.

● 코드를 다 작성했다면 Postman으로 다음 정보를 요청해 보세요.
  POST http://localhost:4000/api/posts
  {
    "title": "제목",
    "body": "내용",
    "tags": ["태그", "배열", "입니다."]
  }

●  반복하여 Send 버튼을 눌러 _id값이 계속 바뀌는 것을 확인하세요.