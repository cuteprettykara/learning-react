● 스키마
  컬렉션에 들어가는 문서 내부의 각 필드가 어떤 형식으로 되어 있는지 정의하는 객체

● 모델
  스키마를 사용하여 만드는 인스턴스로,
  DB에서 실제 작업을 처리할 수 있는 [함수들]을 지니고 있는 객체

● 스키마 생성
  블로그 포스트에 대한 스키마
  * 제목  : title         : 문자열
  * 내용  : body          : 문자열
  * 태그  : tags          : 문자열 배열
  * 작성일: publishedDate : 날짜

  [src/models/post.js]
  const mongoose = require('mongoose');

  const { Schema } = mongoose;

  const Post = new Schema({
    title: String,
    body: String,
    tags: [String], // 문자열 배열
    publishedDate: {
      type: Date,
      default: new Date() // 현재 날짜를 기본 값으로 지정
    }
  });

● Schema에서 기본적으로 지원하는 타입
  * String: 문자열
  * Number: 숫자
  * Date:   날짜
  * Buffer: 파일을 담을 수 있는 버퍼
  * Boolean:
  * Mixed(Schema.Types.Mixed): 어떤 데이터도 넣을 수 있는 형식
  * ObjectId(Schema.Types.ObjectId): 객체 아이디. 주로 다른 객체를 참조할 때 넣음
  * Array: 배열 형태의 값으로 []로 감싸서 사용

● 모델 생성
  [src/models/post.js]
  ...

  // 첫 번째 파라미터: 스키마 이름
  // 두 번째 파라미터: 스키마 객체
  module.exports = mongoose.model('Post', Post);

  데이터베이스는 스키마 이름을 정해주면, 이 이름의 복수 형태로 컬렉션 이름을 만듭니다.
  * Post -> posts
  * BookInfo -> bookinfos

  MongoDB의 컬렉션 이름을 만들 때 컨벤션:
  * 구분자를 사용하지 않고,
  * 복수형태
  => 이 컨벤션을 따르고 싶지 않다면, 세 번째 파라미터에 원하는 이름을 입력한다.
     mongoose.model('Post', Post, 'custom_book_collecton');

  모델을 만들 때 첫 번째 파라미터로 쓰는 이름은 나중에 다른 스키마에서 현재 스키마를 참조해야 하는
  상황에서 사용합니다.