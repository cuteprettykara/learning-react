● 관계형 데이터베이스의 한계
  * 데이터 스키마가 고정적
    새로 등록하는 데이터 형식이 기존에 있던 데이터들과 다를 때 :
    => 기존 데이터를 모두 수정해야 새 데이터를 등록할 수 있다.
  * 확장성
    저장하고 처리해야 할 데이터양이 늘어나면 여러 컴퓨터에 분산시키는 것이 아니라,
    해당 데이터베이스 서버의 성능을 업그레이드하는 방법으로 해결

● MongoDB는 이런 한계를 극복한 [문서 지향적] NoSQL 데이터베이스입니다.
  * 유동적 스키마
    새로 등록하는 데이터 형식이 바뀌더라도, 기존 데이터까지 수정할 필요는 없습니다.
  * 확장성
    서버의 데이터양이 늘어나도, 한 컴퓨터에서만 처리하는 것이 아니라,
    여러 컴퓨터로 분산하여 처리할 수 있도록 설계되어 있습니다.

● 문서(Document)
  * 문서는 RDBMS의 record와 개념이 비슷합니다.
    한 개 이상의 key-value 쌍으로 되어 있습니다.
  * 문서는 BSON(Binary JSON)형태로 저장합니다.
    JSON 형태의 객체를 저장할 때 아주 쉽습니다.
  * 새로운 문서를 만들면 _id라는 고유값을 자동으로 생성하는데, 이 값은
    시간, 머신 아이디, 프로세스 아이디, 순차번호로 되어 있어 값의 고유함을 보장합니다.

● 컬렉션: 문서의 집합
  * 기존 RDBMS는 테이블 개념을 사용하기에 각 테이블마다 같은 스키마를 가지고 있어야 합니다.
  * 반면 MongoDB는 다른 스키마를 가지고 있는 문서들이 한 컬렉션에서 공존할 수 있습니다.

● 스키마 디자인
  * RDBMS에서 블로그용 스키마를 설계한다면 각 포스트, 댓글마다 테이블을 만들어 JOIN해서 사용하는
    것이 일반적입니다.
  * MongoDB는 댓글들을 포스트 문서 내부에 넣습니다.
    (NoSQL에서는 그냥 모든 것을 Document 하나에 넣습니다)
  * 문서 내부에 또 다른 문서들이 위치할 수 있는데, 이를 서브다큐먼트(subdocument)라고 합니다.
  * 문서 하나에는 최대 16MB만큼 넣을 수 있습니다.
    : 100자 댓글은 약 0.24KB를 차지
    : 16MB = 16,384KB
    : 댓글 1개 : 0.24 = x : 16384.
    : 0.24x = 16384
    : x = 68,266
    => 문서 하나에 댓글 데이터를 6만 8천여개 넣을 수 있습니다.
    => 이 용량을 초과할 가능성이 있다면 컬렉션을 분리시키는 것이 좋습니다.