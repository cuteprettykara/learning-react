1. 웹 사이트에서는 최근 작성한 포스트 열 개를 보여 줍니다.
2. 아래쪽 페이지네비게이션 부분에서 다음 버튼을 클릭하면 다음 열 개를 보여 줍니다.
3. 유저가 태그를 클릭하면 특정 태그를 가진 포스트들만 분류해서 보여 줍니다.

● 포스트 리스트 API 함수 생성
  getPostLIst 함수를 만들 것인데요.
  이 함수에는 두 가지 옵션, tag값과 page값을 설정할 수 있습니다.

  함수 파라미터로는 tag값과 page값이 있는 객체를 전달받으며,
  객체로 전달된 값을 URL쿼리로 변환하여 API주소 뒷부분에 붙여 줍니다.
  (현재 구현된 API에는 tag옵션을 설정하지 않았습니다. 이 부분은 나중에 구현합니다.)

  이 작업은 query-string 라이브러리를 사용하여 수행합니다.
  이 라이브러리로 문자열 형태의 URL쿼리를 객체 형태로 변환할 수 있고, 반대로 객체 형태를 문자열 형태로 변환할 수도 있답니다.
  이 라이브러리의 v6이상은 구형 웹 브라우저에서 호환되지 않기 때문에, 설치할 때는 뒤에 @5를 붙여 v5를 설치하세요.

  $ yarn add query-string@5

  [src/lib/api.js]
  ...
  import queryString from 'query-string';
  ...
  export const getPostList = ({tag, page}) => axios.get(`/api/post/?${queryString.stringify({tag, page})}`);

  객체를 URL 쿼리 문자열로 변환할 때는 이처럼 queryString.stringify 함수를 사용합니다.

● list 모듈 생성
  모듈 상태에는 포스트 목록 데이터가 들어 있는 posts 값과, 마지막 페이지를 알려 주는 lastPage값이 들어 있습니다.
  이전에 이 API를 만들 때 Last-Page라는 커스텀 HTTP 헤더를 넣어 응답하도록 코드를 작성했는데요.
  axios에서는 소문자로 헤더를 읽어 오므로 action.payload.headers['last-page'] 값을 읽어 오겠습니다.

  [src/store/modules/list.js]
  ...
  import { Map, List, fromJS } from "immutable";
  import * as api from 'lib/api';
  import { pender } from 'redux-pender';

  // action types
  const GET_POST_LIST = 'list/GET_POST_LIST';

  // action creators
  export const getPostList = createAction(GET_POST_LIST, api.getPostList, meta => meta);

  // initial state
  const initialState = Map({
    posts: List(),
    lastPage: null
  });

  // reducer
  export default handleActions({
    ...pender({
      type: GET_POST_LIST,
      onSuccess: (state, action) => {
        const { data: posts } = action.payload;
        const lastPage = action.payload.headers['last-page'];

        return state.set('posts', fromJS(posts))
                    .set('lastPage', parseInt(lastPage, 10));
      }
    })
  }, initialState);

● ListContainer 컴포넌트 생성
  이 컴포넌트는 나중에 ListPage에서 tag값과 page값을 전달받습니다. 이에 따라

  * 포스트 리스트를 불러오는 API를 호출하고,
  * 데이터를 PostList와 Pagination에 넣어 주며,
  * page값이 변하면 리스트를 새로 불러오도록 코드를 작성해 보겠습니다.

  [src/containers/list/ListContainer.js]
  ...
  import PostList from 'components/list/PostList';
  import Pagination from 'components/list/Pagination';
  import { connect } from 'react-redux';
  import { bindActionCreators } from 'redux';
  import * as listActions from 'store/modules/list';

  class ListContainer extends Component {

    getPostList = () => {
      // 페이지와 태그 값을 부모로부터 받아 옵니다.
      const { tag, page, ListActions } = this.props;
      ListActions.getPostList({
        page,
        tag
      });
    }

    componentDidMount() {
      this.getPostList();
    }

    componentDidUpdate(prevProps, prevState) {
      // 페이지/태그가 바뀔 때 리스트를 다시 불러옵니다.
      if (prevProps.page !== this.props.page || prevProps.tag !== this.props.tag) {
        this.getPostList();
        // 스크롤을 맨 위로 올립니다.
        document.documentElement.scrollTop = 0;
      }
    }

    render() {
      const { posts, lastPage, loading, page, tag} = this.props;
      if (loading) return null; // 로딩 중에는 아무것도 보여주지 않습니다.

      return (
        <div>
          <PostList posts={posts} />
          <Pagination page={page} lastPage={lastPage} tag={tag} />
        </div>
      );
    }
  }

  export default connect(
    state => ({
      posts: state.list.get('posts'),
      lastPge: state.list.get('lastPage'),
      loading: state.pender.pending['list/GET_POST_LIST']
    }),
    dispatch => ({
      ListActions: bindActionCreators(listActions, dispatch)
    })
  )(ListContainer);

● 이 컴포넌트를 ListPage에서 불러와 PostList와 Pagination 컴포넌트를 대체하세요.
  그리고 tag값과 page값을 params에서 읽어와 컨테이너 컴포넌트로 전달하세요.

  페이지가 존재하지 않을 때는 기본 값을 1로 설정하겠습니다.

  [src/pages/ListPage.js]
  ...
  import ListContainer from 'containers/list/ListContainer';

  const ListPage = ({match}) => {
    // page의 기본값을 1로 설정합니다.
    const { page=1, tag } = match.params;

    return (
      <div>
        <PageTemplate>
          <ListWrapper>
            <ListContainer
              page={parseInt(page, 10)}
              tag={tag}
            />
          </ListWrapper>
        </PageTemplate>
      </div>
    );
  };
  ...

● PostList 컴포넌트 데이터 렌더링
  기존에 임시로 텍스트를 직접 넣어서 보이던 부분을 props로 받아 온 데이터로 채우겠습니다.
  PostList 내부에 있는 PostItem 컴포넌트에서는 포스트의 내용 일부를 보여 주는데요.
  이 부분에서는 마크다운 html이 변환되지 않으므로 마크다운에서 사용하는 특수문자(#,**,```,> 등)가
  고스란히 보이는 문제점이 있습니다. remove-markdown 라이브러리를 사용하여 이를 숨기겠습니다.

    $ yarn add remove-markdown

  [src/components/list/PostList/PostList.js]
  ...
  import { Link } from 'react-router-dom';
  import moment from 'moment';
  import removeMd from 'remove-markdown';

  const cx = classNames.bind(styles);

  const PostItem = ({title, body, publishedDate, tags, id}) => {
    const tagList = tags.map(tag =>
      <Link key={tag} to={`/tag/${tag}`}>#{tag}</Link>
    );

    return (
      <div className={cx('post-item')}>
        <h2><Link to={`post/${id}`}>{title}</Link></h2>
        <div className={cx('date')}>{moment(publishedDate).format('ll')}</div>
        <p>{removeMd(body)}</p>
        <div className={cx('tags')}>
          {tagList}
        </div>
      </div>
    );
  };

  const PostList = ({posts}) => {
    const postList = posts.map(post => {
      const { _id, title, body, publishedDate, tags } = post.toJS();

      return (
        <PostItem
          title={title}
          body={body}
          publishedDate={publishedDate}
          tags={tags}
          id={_id}
          key={_id}
        />
      );
    });

    return (
      <div className={cx('post-list')}>
        {postList}
      </div>
    );
  };

  export default PostList;