● 상태관리 라이브러리를 따로 사용하지 않고 state만 사용한다면
  * 상태 객체가 너무 복잡하고 큽니다.
  * 최상위 컴포넌트에서 상태 관리를 하는 메소드를 너무 많이 만들어 코드가 복잡합니다.
  * 하위 컴포넌트에 props를 전달하려면 여러 컴포넌트를 거처야 합니다.

● 프리젠테이셔널 컴포넌트(멍청한 컴포넌트)
  * 오직 뷰만 담당.
  * 내부에 DOM 엘리먼트와 스타일이 있다.
  * 내부에 컨테이너 컴포넌트가 있을 수도 있다.
  * 리덕스 스토어에 직접 접근할 권한은 없으며,
  * 오직 props로만 데이터를 가져올 수 있다.
  * 대부분은 state가 없다. => 있다고 해도 데이터와 관련된 것이 아니라 UI와 관련된 것이어야 한다.
  * 주로 함수형 컴포넌트로 작성
  * state가 있어야 하거나, 최적화를 하려고 라이프 사이클 메소드가 필요할 때는 클래스형 컴포넌트로 작성한다.

● 컨테이너 컴포넌트(똑똑한 컴포넌트)
  * 내부에 DOM 엘리먼트를 직접 사용할 때는 없고, 감싸는 용도로만 사용.
  * 내부에 스타일이 없어야 한다(스타일은 프리젠테이셔널 컴포넌트에서 정의해야 한다).
  * state를 가지고 있을 때가 많다.
  * 리덕스 스토어에 직접 접근할 수 있다.

● 이 구조의 장점
  * 유저 인터페이스와 상태를 다루는 데이터가 분리되어
  * 코드를 이해하기가 쉽고,
  * 컴포넌트 재사용율도 높습니다.

● 오해
  * 프리젠테이셔널 컴포넌트 내부에 컨테이너 컴포넌트를 넣어도 됩니다.
    ex) 템플릿 관련 프리젠테이셔널 컴포넌트를 만들고, 그 안에 여러 가지 컨테이너 컴포넌트를 넣을 수 있습니다.