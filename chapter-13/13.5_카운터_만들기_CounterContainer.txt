● react-redux 라이브러리의 connect 함수를 사용하여 컴포넌트를 스토어에 연결시킵니다.

● connect 함수의 파라미터
  * mapStateToProps : state를 파라미터로 받아 컴포넌트의 props로 사용할 객체를 반환
  * mapDispatchToProps : dispatch를 파라미터로 받아 액션을 디스패치하는 함수들을 객체 안에 넣어서 반환
  * mergeProps: state와 dispatch가 동시에 필요한 함수를 props로 전달해야 할 때 사용.

● connect 함수를 호출하고 나면 또 다른 함수를 반환합니다. 이때 반환되는 함수의 파라미터로 
  리덕스에 연결시킬 컴포넌트를 넣으면 mapStateToProps, mapDispatchToProps에서 정의한 값들을
  [props로 받아 오는] 새 컴포넌트를 만듭니다.

[src/containers/CounterCountainer.js]
import Counter from '../components/Counter';
import * as actions from '../actions';
import { connect } from 'react-redux';

// 13가지 색상 중 랜덤으로 선택하는 함수입니다
export function getRandomColor() {
  const colors = [
      '#495057',
      '#f03e3e',
      '#d6336c',
      '#ae3ec9',
      '#7048e8',
      '#4263eb',
      '#1c7cd6',
      '#1098ad',
      '#0ca678',
      '#37b24d',
      '#74b816',
      '#f59f00',
      '#f76707'
  ];

  // 0부터 12까지 랜덤 숫자
  const random = Math.floor(Math.random() * 13);

  // 랜덤 색상 반환
  return colors[random];
}

// store 안의 state 값을 props로 연결해줍니다.
const mapStateToProps = (state) => ({
  color: state.color,
  number: state.number
});

/* 
    액션 생성 함수를 사용하여 액션을 생성하고,
    해당 액션을 dispatch하는 함수를 만든 후, 이를 props로 연결해줍니다.
*/
const mapDispatchToProps = dispatch => ({
  onIncrement: () => dispatch(actions.increment()),
  onDecrement: () => dispatch(actions.decrement()),
  onSetColor: () => {
    const color = getRandomColor();
    dispatch(actions.setColor(color));
  }
});

// Counter 컴포넌트의 Container 컴포넌트
// Counter 컴포넌트를 애플리케이션의 데이터 레이어와 묶는 역할을 합니다.
// 이렇게 하면 
// * mapStateToProps의 color값, number 값과
// * mapDispatchToProps의 onIncrement값, onDecrement값, onSetColor값이
// * Counter 컴포넌트의 props로 들어갑니다.
const CounterCountainer = connect(
  mapStateToProps,
  mapDispatchToProps
)(Counter);

export default CounterCountainer;