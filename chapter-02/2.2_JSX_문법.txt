● 컴포넌트에 여러 요소가 있다면 [부모 요소 하나]로 꼭 감싸야 합니다.

  * 이렇게 작성하면 제대로 렌더링되지 않습니다.
  [src/index.js]
  ...
  class App extends Component {
    render() {
      return (
        <h1>리액트 안녕!</h1>
        <h2>당신은 어썸한가요?</h2> => Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag.
      );
    }
  }
  ...

  * 다음과 같이 코드를 작성하여 해결할 수 있습니다.
  ...
  class App extends Component {
    render() {
      return (
        <div>
          <h1>리액트 안녕!</h1>
          <h2>당신은 어썸한가요?</h2>
        </div>
      );
    }
  }
  ...

  * 하지만 왜 꼭 부모 요소로 감싸야 할까요?
  => Virtual DOM에서 변화를 감지해 낼 때 효율적으로 비교할 수 있도록
     [컴포넌트 내부는 DOM트리 구조 하나여야 한다]는 규칙이 있기 때문입니다.

● 리액트 v16 이상에서는 Fragment 컴포넌트가 도입되었다.
  div같은 것으로 감싸지 않고, 여러 요소를 렌더링하고 싶을 때 사용한다.
  => 불필요한 div를 렌더링하는 것을 생략할 수 있다.
  import React, { Component, Fragment } from 'react';

  class App extends Component {
    render() {
      return (
        <Fragment>
          <h1>리액트 안녕!</h1>
          <h2>당신은 어썸한가요?</h2>
        </Fragment>
      );
    }
  }

  export default App;

● JSX 안에서 자바스크립트 표현식을 쓸 수 있습니다.
  => JSX 내부에서 코드를 {}로 감싸면 됩니다.

● if문 대신 조건부 연산자
  특정 조건을 만족할 때와 만족하지 않을 때, 다른 결과를 보여 주어야 한다면
  => 삼항연산자 사용 : { condition ? '참' : '거짓' }

● &&를 사용한 조건부 렌더링
  특정 조건을 만족할 때는 보여주고, 만족하지 않을 때는 보여 주고 싶지 않다면
  1.삼항연산자 사용 : { condition ? '참' : null } or { condition ? '참' : false }
    -> JSX는 null값 외에도 false 값을 렌더링하면 아무것도 나타나지 않습니다.
  2.단축평가 사용   : { condition && '보여주세요' }

● 인라인 스타일링
  리액트에서 DOM 요소에 스타일을 적용할 때는 문자열 형태로 적용할 수 없습니다.
  그 대신 CSS 스타일을 [자바스크립트 객체 형식]으로 만들어 적용해야 합니다.

  객체에서 key는 '-'을 사용할 수 없으므로 camelCase로 작성합니다.
    # background-color => backgroundColor
    # -mos => Mos
    # -webkit => Webkit
    # -ms => ms (예외)

● class 대신 className

● 꼭 닫아야 하는 태그
  * HTML <input>은 닫지 않아도 문제가 생기지 않습니다.
    <form>
      First name: <br>
      <input type="text" name="firstname"><br>
    </form>

  * 하지만 JSX에서 이렇게 작성하면 오류가 발생합니다.
    => 태그를 닫지 않으면 Virtual DOM에서 트리 형태의 구조를 만들지 못합니다.
    => JSX에서는 다음과 같이 언제나 코드를 닫아 주어야 합니다.
    <form>
      First name: <br />
      <input type="text" name="firstname" /><br />
    </form>

● 주석
  요소 밖 : { /* 이런 형식으로 */ } -> 표현식처럼...
  self-closed 요소에서 />를 [다음 줄]에 작성할 때는 그 사이에 주석을 {}없이 작성 가능

  return (
    <div className="my-div">
      { /* 요소 밖에서는 이렇게 작성해요. */ }
      <h1>리액트 안녕!</h1>
      <h2>{text}</h2>
      { condition && '보여주세요'}
      <div
        // self-closed 태그에서만 작동하는 주석
        // 마지막 />가 꼭 새 줄에 있어야 합니다.
        /* 이렇게 작성할 수도 있고요.*/
      />
      // 여기 쓰는 건 그대로 렌더링됩니다.
      /* 여기에선 주석 못 써요. */
    </div>
  );